// Run this generator like a script:
// scala MemoizeGenerator.scala > ../src/main/scala/com/twitter/storehaus/cache/Memoize.scala

/*
 * Example of the code generated:

class Memoize1[-T1, +R](cache: MutableCache[T1, R], f: T1 => R) extends (T1 => R) {
  override def apply(t1: T1): R = cache.getOrElseUpdate(t1, f(t1))
}
*/

def genParams(count: Int)(fn: Int => String): String =
  (1 to count).map { fn(_) }.mkString(", ")

def applyLine(i: Int) = {
  val types = genParams(i) { "T" + _ }
  "  def apply[%s, R](cache: MutableCache[(%s), R])(f: (%s) => R) = new Memoize%d(cache, f)".format(types, types, types, i)
}

def memoizedFunction(i: Int): String = {
  def prefixed(s: String) = genParams(i) { s + _ }
  val covariants = prefixed("-T")
  val types = prefixed("T")
  val args = prefixed("t")
  val argsWithTypes = genParams(i) { i => "t%d: T%d".format(i, i) }
  """class Memoize%d[%s, +R](cache: MutableCache[(%s), R], f: (%s) => R) extends ((%s) => R) {
  override def apply(%s): R = cache.getOrElseUpdate((%s), f(%s))
}""".format(i, covariants, types, types, types, argsWithTypes, args, args)
}

println("// Autogenerated code. DO NOT EDIT BY HAND! Instead, edit $REPO_ROOT/storehaus-core/codegen/MemoizeGenerator.scala")
println("package com.twitter.storehaus.cache")
println("""
/**
  * Memoize supplies a number of functions for generating memoized
  * versions of Scala's functions using a MutableCache instance.
  *
  * For example,
  *
  * {{{
  * import com.twitter.storehaus.cache._
  *
  * scala> val sleepyToString = Memoize(Cache.toMutable(MapCache.empty[Int, String])) { i => println("CALCULATING!"); i.toString }
  * sleepyToString: com.twitter.storehaus.cache.Memoize1[Int,String] = <function1>
  *
  * scala> sleepyToString(10)
  * CALCULATING!
  * res0: String = 10
  *
  * scala> sleepyToString(10)
  * res1: String = 10
  * }}}
  *
  */
""")
println("object Memoize {")
(1 to 22).map { applyLine(_) }.foreach { println(_) }
println("}")
(1 to 22).map { memoizedFunction(_) }.foreach { println(_) }
